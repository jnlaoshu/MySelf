//# ÁΩëÁªú‰ø°ÊÅØ
//# ùêîùêëùêãÔºö https://raw.githubusercontent.com/jnlaoshu/MySelf/master/Egern/Module/NetworkInfo.js
//# ùêÖùê´ùê®ùê¶Ôºöhttps://github.com/Nebulosa-Cat/Surge/blob/main/Panel/Network-Info/net-info-panel.js
//# ùêîùê©ùêùùêöùê≠ùêûÔºö2025.10.09 11:30

/*
[Script]
ÁΩëÁªú‰ø°ÊÅØ = type=generic,timeout=10,script-path=https://raw.githubusercontent.com/jnlaoshu/MySelf/master/Egern/Module/NetworkInfo.js
	
[Panel]
ÁΩëÁªú‰ø°ÊÅØ = script-name=ÁΩëÁªú‰ø°ÊÅØ,title=ÁΩëÁªú‰ø°ÊÅØ,content=ËØ∑Âà∑Êñ∞,style=info,update-interval=1
*/

/**
 * ÁΩëÁªúËØ∑Ê±ÇÂ∞ÅË£Ö‰∏∫ Promise
 * Usage: httpMethod.get(option).then(response => { logger.log(data) }).catch(error => { logger.log(error) })
 * Usage: httpMethod.post(option).then(response => { logger.log(data) }).catch(error => { logger.log(error) })
 * response: { status, headers, data }
 */
class httpMethod {
    /**
     * Callback function
     * @param {*} resolve 
     * @param {*} reject 
     * @param {*} error 
     * @param {*} response 
     * @param {*} data 
     */
    static _httpRequestCallback(resolve, reject, error, response, data) {
        if (error) {
            reject(error);
        } else {
            resolve(Object.assign(response, { data }));
        }
    }

    /**
     * HTTP GET
     * @param {Object} option ÈÅ∏È†Ö
     * @returns 
     */
    static get(option = {}) {
        return new Promise((resolve, reject) => {
            $httpClient.get(option, (error, response, data) => {
                this._httpRequestCallback(resolve, reject, error, response, data);
            });
        });
    }

    /**
     * HTTP POST
     * @param {Object} option ÈÄâÈ°π
     * @returns 
     */
    static post(option = {}) {
        return new Promise((resolve, reject) => {
            $httpClient.post(option, (error, response, data) => {
                this._httpRequestCallback(resolve, reject, error, response, data);
            });
        });
    }
}

class loggerUtil {
    constructor() {
        this.id = randomString();
    }

    log(message) {
        message = `[${this.id}] [ LOG ] ${message}`;
        console.log(message);
    }

    error(message) {
        message = `[${this.id}] [ERROR] ${message}`;
        console.log(message);
    }
}

var logger = new loggerUtil();

function randomString(e = 6) {
    var t = "ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678",
        a = t.length,
        n = "";
    for (i = 0; i < e; i++) n += t.charAt(Math.floor(Math.random() * a));
    return n;
}

function getFlagEmoji(countryCode) {
    const codePoints = countryCode
        .toUpperCase()
        .split('')
        .map((char) => 127397 + char.charCodeAt());
    return String.fromCodePoint(...codePoints);
}


//ÂèñÂæóÊâãÊ©ü‰ΩøÁî®ÊúçÂãôÊ•≠ËÄÖË®äÊÅØ(ÈÄèÈÅéÂÖßÂª∫ API Ë™øÁî®Êú¨Ê©üË≥áË®ä)
function getCellularInfo() {
    const radioGeneration = {
        'GPRS': '2.5G',
        'CDMA1x': '2.5G',
        'EDGE': '2.75G',
        'WCDMA': '3G',
        'HSDPA': '3.5G',
        'CDMAEVDORev0': '3.5G',
        'CDMAEVDORevA': '3.5G',
        'CDMAEVDORevB': '3.75G',
        'HSUPA': '3.75G',
        'eHRPD': '3.9G',
        'LTE': '4G',
        'NRNSA': '5G',
        'NR': '5G',
    };

    let cellularInfo = '';
    if ($network['cellular-data']) {
        const carrierId = $network['cellular-data'].carrier;
        const radio = $network['cellular-data'].radio;
        if ($network.wifi?.ssid == null && radio) {
            cellularInfo = 
                `Ë°åÂãïÊï∏Êìö | ${radioGeneration[radio]} - ${radio}`;
        }
    }
    return cellularInfo;
}

function getSSID() {
    return $network.wifi?.ssid;
}

function getIP() {
    const { v4, v6 } = $network;
    let info = [];
    if (!v4 && !v6) {
      info = ['Á∂≤Ë∑ØÂèØËÉΩÂàáÊèõ', 'Ë´ãÊâãÂãïÈáçÊï¥Èù¢ÊùøÊõ¥Êñ∞ IP'];
    } else {
      if (v4?.primaryAddress) info.push(`v4 @ ${v4?.primaryAddress}`);
      if (v6?.primaryAddress) info.push(`v6 @ ${v6?.primaryAddress}`);
      if (v4?.primaryRouter && getSSID()) info.push(`Router v4 @ ${v4?.primaryRouter}`);
      if (v6?.primaryRouter && getSSID()) info.push(`Router IPv6 @ ${v6?.primaryRouter}`);
    }
    info = info.join("\n");
    return info + "\n";
  }

/**
 * Áç≤ÂèñIPË®äÊÅØ
 * @param {*} retryTimes // ÈáçË©¶Ê¨°Êï∏
 * @param {*} retryInterval // ÈáçË©¶ÈñìÊ†º ms
 */
function getNetworkInfo(retryTimes = 5, retryInterval = 1000) {
    // send http request
    httpMethod.get('http://ip-api.com/json').then(response => {
        if (Number(response.status) > 300) {
            throw new Error(`Request error with http status code: ${response.status}\n${response.data}`);
        }
        const info = JSON.parse(response.data);
        $done({
            title: getSSID() ?? getCellularInfo(),
            content:
                `[IP Adress]\n` +
                getIP() +
                `[ÁØÄÈªû IP] ${info.query}\n` +
                `[ÁØÄÈªû‰ΩçÁΩÆ] ${info.isp}\n` +
                `[ÁØÄÈªû‰ΩçÁΩÆ] ${getFlagEmoji(info.countryCode)} | ${info.country} - ${info.city}`,
            icon: getSSID() ? 'wifi' : 'simcard',
            'icon-color': getSSID() ? '#005CAF' : '#F9BF45',
        });
    }).catch(error => {
        // Á∂≤Ë∑ØÂàáÊèõ
        if (String(error).startsWith("Network changed")) {
            if (getSSID()) {
                $network.wifi = undefined;
                $network.v4 = undefined;
                $network.v6 = undefined;
            }
        }
        // Âà§Êñ∑ÊòØÂê¶ÊúâÈáçË©¶Ê©üÊúÉ
        if (retryTimes > 0) {
            logger.error(error);
            logger.log(`Retry after ${retryInterval}ms`);
            // retryInterval ÊôÇÈñìÂæåÂÜçÊ¨°Âü∑Ë°åË©≤ÂáΩÊï∏
            setTimeout(() => getNetworkInfo(--retryTimes, retryInterval), retryInterval);
        } else {
            // ÊâìÂç∞Êó•Ë™å
            logger.error(error);
            $done({
                title: 'ÁôºÁîüÈåØË™§',
                content: 'ÁÑ°Ê≥ïÁç≤ÂæóÁõÆÂâçÁ∂≤Ë∑ØË≥áË®ä\nË´ãÊ™¢Êü•Á∂≤ÈöõÁ∂≤Ë∑ØÁãÄÊÖãÂæåÈáçË©¶',
                icon: 'wifi.exclamationmark',
                'icon-color': '#CB1B45',
            });
        }
    });
}

/**
* ‰∏ªË¶ÅÈÇèËºØÔºåÁ®ãÂºèÈñãÂßã
*/
(() => {
    const retryTimes = 5;
    const retryInterval = 1000;
    // Surge ËÖ≥Êú¨ÈÄæÊôÇÊôÇÈñìË®≠ÁÇ∫ 30s
    // ÊèêÊó© 500ms ÁµêÊùüÈÄ≤Á®ã
    const surgeMaxTimeout = 29500;
    // ËÖ≥Êú¨Ë∂ÖÊôÇÊôÇÈñì
    // retryTimes * 5000 ÁÇ∫ÊØèÊ¨°Á∂≤Ë∑ØË´ãÊ±ÇÈÄæÊôÇÊôÇÈñìÔºàSurge Á∂≤Ë∑ØË´ãÊ±ÇÈÄæÊôÇÁÇ∫ 5sÔºâ
    const scriptTimeout = retryTimes * 5000 + retryTimes * retryInterval;
    setTimeout(() => {
        logger.log("Script timeout");
        $done({
            title: "Ë´ãÊ±ÇÈÄæÊôÇ",
            content: "ÈÄ£Á∑öË´ãÊ±ÇÈÄæÊôÇ\nË´ãÊ™¢Êü•Á∂≤ÈöõÁ∂≤Ë∑ØÁãÄÊÖãÂæåÈáçË©¶",
            icon: 'wifi.exclamationmark',
            'icon-color': '#CB1B45',
        });
    }, scriptTimeout > surgeMaxTimeout ? surgeMaxTimeout : scriptTimeout);

    // Áç≤ÂèñÁ∂≤Ë∑ØË®äÊÅØ
    logger.log("Script start");
    getNetworkInfo(retryTimes, retryInterval);
})();
